<% c++ #include <cppcms/view.h> %>
<% c++ #include <algorithm> %>
<% skin %>
<% view pagination_helper  %>
    <% template pagination(std::string base_url, int offset, int size, int max) %>
        <div>
            <% if (offset != 0) %>
                <a href="<% c++ out() << base_url ;%>">
                    first
                </a>
                <a href="<% c++ out() << base_url ;%>/<% c++ out() << (1 +offset) - size << "/" << size ;%>" >
                    prev
                </a>

            <% end %>
            
            <% c++ int currentPage = offset/size + 1; %> 
            <% c++ int maxPage = max /size + 1; %> 
            <% c++ int paginationSize = std::min(6, maxPage); %>
            <% c++ int maxPrevPages = std::min(paginationSize, currentPage-1); %>
            <% c++ int maxNextPages = std::min(paginationSize, maxPage-currentPage); %>

            <% c++ int minPrevPages = std::min(paginationSize/2, maxPrevPages); %>
            <% c++ int minNextPages = std::min(paginationSize/2, maxNextPages); %>

            <% c++ int dispPrevPages; %>
            <% c++ int dispNextPages; %>
            <% c++ if (minPrevPages < minNextPages) { %>
            <% c++     dispPrevPages = minPrevPages; %>
            <% c++     dispNextPages = paginationSize - minPrevPages; %>
            <% c++ } else { %>
            <% c++     dispNextPages = minNextPages; %>
            <% c++     dispPrevPages = paginationSize - minNextPages; %>
            <% c++ } %>
            <ul> 
                <% c++ for (int i = currentPage - dispPrevPages ; i < currentPage ; ++i) { %>
                    <li><% c++ out() << i; %></li> 
                <% c++ } %>
                <li>*<%c++ out() << currentPage; %></li>
                <% c++ for (int i = currentPage + 1; i <= currentPage + dispNextPages ; ++i) { %>
                    <li><% c++ out() << i; %></li> 
                <% c++ } %>
            </ul>
            <% if ((offset+size) < max) %>
                <a href="<% c++ out() << base_url ;%>/<% c++ out() << (1+ offset + size) << "/" << size ;%>" >
                    next
                </a>


                <a href="<% c++ out() << base_url ;%>/<% c++ out() << (1+ ((max/size) *size))<< "/" << size;%>" >
                    max
                </a>
            <% end %>
            

        </div>
    <% end template %>

<% end view %>
<% end skin %>

