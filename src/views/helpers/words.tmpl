<%c++ extern "C" { %> 
<%c++    #include "tato/fetcher.h" %>
<%c++    #include "tato/hyperitem.h" %>
<%c++    #include "tato/kvlist.h" %>
<%c++ } %>
<%c++ #include "contents/helpers/words.h" %>
<%c++ #include "contents/helpers/paginations.h" %>
<%c++ #include "models/Relations.h" %>
<%c++ #include "models/Words.h" %>
<%c++ typedef char* char_p; %>
<% skin %>
<% view words_helper uses contents::WordsHelper %>



    <% template word_group() %>
        <div>
            <% include word_alone() %>
        </div>
        <div>
            <% include word_metas() %>
        </div>
        <div>
            <% include word_all_translations() %>
        </div>
    <% end template %>

    <% template word_alone() %>
        <% c++ TatoHyperItem *item = content.fetcher->items[0] ;%>
        <% c++ out() << item->str ;%> 
    <% end template %>

    <% template word_meanings() %>
        <% c++ TatoHyperItem *item = content.fetcher->items[0] ;%>

	    <% c++ TatoHyperRelationsNode *it; %>
        <ul>
	    <% c++ TATO_HYPER_RELATIONS_FOREACH(item->startofs, it) { %>
            <% c++ if (it->relation->type == SHDICT_MEANING_REL_FLAG) { %>
                <li>
                    definition:
                    <% c++ out() << " " << tato_hyper_relation_meta_get(it->relation, "definition"); %>
                    <% c++ int meaningId = it->relation->id; %>
                    <% c++ int wordId = item->id; %>

                    <% c++ add_trans_to_meaning_link(meaningId, wordId); %>
                    <% c++ out() << " " ; %>
                    <% c++ edit_meaning_link(meaningId, wordId); %>
                    <% c++ out() << " " ; %>
                    <% c++ delete_meaning_link(meaningId); %>
                </li>
            <% c++ } %>  
        <% c++ } %>
        </ul>
    <% end template %>

    <% template add_trans_to_meaning_link(int meaningId, int wordId) %>
        <a href="<% url "/translations/add-to-meaning/{1}/{2}" using meaningId, wordId %>" >
            add translation
        </a>
    <% end template %>

    <% template edit_meaning_link(int meaningId, int wordId) %>
        <a href="<% url "/meanings/edit/{1}/{2}" using meaningId, wordId %>" >
            edit
        </a>
    <% end template %>

    <% template delete_meaning_link(int meaningId) %>
        <a href="<% url "/meanings/delete-by-id/{1}" using meaningId %>" >
            <img src="http://sysko.fr/img/icons/remove.png" alt="remove" />
        </a>
    <% end template %>


    <% template word_metas() %>
        <% c++ TatoHyperItem *item = content.fetcher->items[0] ;%>

	    <% c++ TatoKvListNode *it; %>
        <ul>
	    <% c++ TATO_KVLIST_FOREACH(item->metas, it) { %>
            <li>
                <% c++ std::string key(it->key); %>
                <% c++ std::string value(it->value); %>
                <% c++ int wordId = item->id; %>
                
                <% c++ out() << key << " " ;%>
                :
                <% c++ out() << " " << value; %>
                
                <% c++ out() << " " ; %>
                <% c++ out() << " " ; %>
                <% c++ edit_meta_link(wordId, key); %>
                <% c++ remove_meta_link(wordId, key); %>
            </li>
        <% c++ } %>
        <% c++ if (item->metas == NULL) { %>
            <li>No Metas yet</li>
        <% c++ } %>
        </ul>
    <% end template %>

    <% template edit_meta_link(int wordId, std::string key) %>
        <a href="<% url "/metas/edit/{1}/{2}" using wordId, key %>" >
            edit
        </a>
    <% end template %>

    <% template remove_meta_link(int wordId, std::string key) %>
        <a href="<% url "/metas/remove-from/{1}/{2}" using wordId, key %>" >
            <img src="http://sysko.fr/img/icons/remove.png" alt="remove" />
        </a>
    <% end template %>



    <% template word_all_translations() %>
        <% c++ TatoHyperItem *item = content.fetcher->items[0]; %>
        <h4>Definitions</h4>
        <% foreach meaning in packedMeaningsTrans %> 
            <ol>
            <% item %>
                <li>
                    <% c++ out() << " " << %>
                    <% c++     tato_hyper_relation_meta_get( %>
                    <% c++         meaning.first, %>
                    <% c++         "definition" %>
                    <% c++     ); %>
                    <% c++ int meaningId = meaning.first->id; %>
                    <% c++ remove_meaning_link(meaningId); %>
                    <br /> 
                    <h5>Translations</h5>
                    <% c++ translations_pack(meaning.second, item->id, meaningId); %>
                    <% c++ add_trans_to_meaning_link(meaningId, item->id); %>
                </li>
                <br />
            <% end %>
            </ol>
            <% empty %>
            No Definition yet
        <% end %><!-- end foreach meaning -->

        <h4>Other Translations</h4>
        <% c++ translations_pack(content.packedTransWithoutMeaning, item->id, 0); %>
    <% end template %>

    <% template add_trans_to_mean_link(int meaningId, int wordId) %>
        <a href="<% url "/translations/add-to-meaning/" %><%  meaningId %>/<% wordId %>" >
            add translation
        </a>
    <% end template %>

    <% template remove_meaning_link(int meaningId) %>
        <a href="<% url "/meanings/delete-by-id/{1}" using meaningId %>" >
            <img src="http://sysko.fr/img/icons/remove.png" alt="remove" />
        </a>
    <% end template %>


    <% template translations_pack(models::TranslationsMap transMap, int wordId, int meaningId) %>
        <% foreach language in transMap %>
            <% item %>
                <div>
                    <% if (language.second.empty()) %>
                        <% c++ continue; %>
                    <% end %>
                    <h6><% language.first %></h6>
                    <% foreach translation in language.second %>
                        <ul>
                        <% item %>
                            <li>
                                <% c++ show_trans_link( %>
                                <% c++     translation->str, %>
                                <% c++     translation->lang->code %>
                                <% c++ ); %>
                                
                                <% c++ out() << " " ; %>

                                <% if (meaningId == 0) %>

                                    <% c++ remove_translation_from_word_link( %>
                                    <% c++     translation->id, %>
                                    <% c++     wordId %>
                                    <% c++ ) ;%>

                                <% else %>

                                    <% c++ remove_translation_from_meaning_link( %>
                                    <% c++     translation->id, %>
                                    <% c++     meaningId %>
                                    <% c++ ) ;%>

                                <% end %>
                            </li>
                        <% end %>
                        </ul>
                    <% end %><!-- end foreach translation --> 
                </div>
            <% end %>
            <% empty %>
            No translation yet
        <% end %> <!-- end foreach language -->


    <% end template %>

    <% template words_list(std::string title) %>
        <% c++ contents::PaginationsHelper phc( %>
        <% c++ content.fetcher->offset, %>
        <% c++ content.fetcher->capacity, %>
        <% c++ content.fetcher->max_size, %>
        <% c++ content.baseUrl, %>
        <% c++ content.lang %>
        <% c++ ); %>

        <h3>
            <% c++ out() << title ;%>
             (Total: <% c++ out() <<content.fetcher->max_size ;%> Word(s))
        </h3>
        
        <% c++ pagination_helper ph(out(), phc); %> 
        <% c++ ph.pagination(); %>

        <% c++ for(int i = 0; i < content.fetcher->size ; i++) { %>
            <% c++ int id = content.fetcher->items[i]->id ; %>
            <% c++ std::string str = std::string(content.fetcher->items[i]->str) ; %>
            <% c++ std::string wordLang = std::string(content.fetcher->items[i]->lang->code) ; %>
            <div>
                <% c++ flag_img(wordLang); %>
                <span><% c++ out() << str ;%></span>
                <% c++ show_word_link(str, wordLang); %>
                <% c++ edit_word_link(id); %>
                <% c++ delete_word_link(id); %>
            </div>
        <% c++ } %>
    <% end template %>


    <% template flag_img(std::string wordLang) %>
        <img src="http://sysko.fr/img/<% wordLang %>.png" /> 
    <% end template %>

    <% template show_trans_link(char_p str, char_p lang) %>
        <a href="<% url "/words/show-in/{1}/{2}" using str, lang %>" >
            <% str %>
        </a>
    <% end template %>

    <% template remove_translation_from_word_link(int transId, int wordId) %>
        <a href="<% url "/translations/remove/{1}/from/{2}" using transId, wordId %>" >
            <img src="http://sysko.fr/img/icons/remove.png" alt="remove" />
        </a>
    <% end template %>

    <% template remove_translation_from_meaning_link(int transId, int meaningId) %>
        <a href="<% url "/translations/remove/{1}/from-meaning/{2}" using transId, meaningId %>" >
            <img src="http://sysko.fr/img/icons/remove.png" alt="remove" />
        </a>
    <% end template %>


    <% template show_word_link(std::string wordText, std::string wordLang ) %>
        <a href="<% url "/words/show-in/{1}/{2}" using wordText, wordLang %>">
            show
        </a>
    <% end template %>

    <% template edit_word_link(int wordId) %>
        <a href="<% url "/words/edit/{1}" using wordId %>">edit</a>
    <% end template %>

    <% template delete_word_link(int wordId) %>
        <a href="<% url "/words/delete-by-id/{1}" using wordId %>">
            <img src="http://sysko.fr/img/icons/remove.png" alt="delete" />
        </a>
    <% end template %>


    <% template back_to_word_link() %>
        <% if not is_empty() %>
            <% c++ std::string wordText(content.fetcher->items[0]->str); %>
            <% c++ std::string wordLang(content.fetcher->items[0]->lang->code); %>
            <% c++ back_to_word_link(wordText, wordLang); %>
        <% end %>
    <% end template %>

    <% template back_to_word_link(std::string wordText, std::string wordLang) %>
        <a href="<% url "/words/show-in/{1}/{2}" using wordText, wordLang %>" >
            back to word
        </a> 
    <% end template %>




    <% template translate_word_link() %>
        <% if not is_empty() %>
            <% c++ int id = content.fetcher->items[0]->id ;%>
            <a href="<% url "/translations/add-to-word/" %><% c++ out() << id ;%>" >
                translate
            </a> 
        <% end %>
    <% end template %>


    <% template add_meta_link() %>
        <% if not is_empty() %>
            <% c++ int id = content.fetcher->items[0]->id ;%>
            <a href="<% url "/metas/add/" %><% c++ out() << id ;%>" >
                add meta
            </a> 
        <% end %>
    <% end template %>




    <% template add_meaning_link() %>
        <% if not is_empty() %>
            <% c++ int id = content.fetcher->items[0]->id ;%>
            <a href="<% url "/meanings/add-to-word/" %><% c++ out() << id ;%>" >
                add meaning
            </a> 
        <% end %>
    <% end template %>



<% end view %>
<% end skin %>
