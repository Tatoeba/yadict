<%c++ extern "C" { %> 
<%c++    #include "tato/fetcher.h" %>
<%c++    #include "tato/hyperitem.h" %>
<%c++ } %>
<%c++ #include "contents/helpers/words.h" %>
<%c++ #include "contents/helpers/paginations.h" %>
<% skin %>
<% view words_helper uses contents::WordsHelper %>



    <% template word_group() %>
        <% c++ TatoHyperItem *item = content.fetcher->items[0] ;%>
        <% c++ out() << item->str ;%> 
        <h4>Translations</h4>
        <% foreach languages in packedTrans %>
            <% item %>
                <div>
                    <h5><% languages.first %></h5>
                    <% foreach translation in languages.second %>
                        <ul>
                        <% item %>
                            <li>
                                <a href="<% url "/words/show/" %><% translation->str %>" >
                                    <% translation->str %>
                                </a>
                                <a href="<% url "/translations/remove/" %><% translation->id %>/from/<% c++ out() << item->id ;%>">
                                remove
                                </a>
                            </li>
                        <% end %>
                        </ul>
                    <% end %>  
                </div>
            <% end %>
        <% empty %>
            No translations yet
        <% end%>
    <% end template %>




    <% template words_list(std::string title) %>
        <% c++ contents::PaginationsHelper phc( %>
        <% c++ content.fetcher->offset, %>
        <% c++ content.fetcher->capacity, %>
        <% c++ content.fetcher->max_size, %>
        <% c++ content.baseUrl, %>
        <% c++ content.lang %>
        <% c++ ); %>

        <h3>
            <% c++ out() << title ;%>
             (Total: <% c++ out() <<content.fetcher->max_size ;%> Word(s))
        </h3>
        
        <% c++ pagination_helper ph(out(), phc); %> 
        <% c++ ph.pagination(); %>

        <% c++ for(int i = 0; i < content.fetcher->size ; i++) { %>
            <% c++ int id = content.fetcher->items[i]->id ; %>
            <% c++ std::string str = std::string(content.fetcher->items[i]->str) ; %>
            <div>
                <span><% c++ out() << id ;%></span> 
                <span><% c++ out() << str ;%></span>
                <span><% c++ out() << content.fetcher->items[i]->lang->code ;%></span> 
                <!--
                    TODO once we will have a singleton class to store lang etc, need to
                    put again url tag
                -->
                <a href="<% url "/words/show/" %><% c++ out() << str; %>">show</a>
                <a href="<% url "/words/edit/" %><% c++ out() << id; %>">edit</a>
                <a href="<% url "/words/delete-by-id/" %><% c++ out() << id; %>">delete</a>
            </div>
        <% c++ } %>
    <% end template %>

    <% template translate_word_link() %>
        <% if not is_empty() %>
            <% c++ int id = content.fetcher->items[0]->id ;%>
            <a href="<% url "/translations/add-to/" %><% c++ out() << id ;%>" >
                translate
            </a> 
        <% end %>
    <% end template %>
<% end view %>
<% end skin %>
